plugins {
    id 'application'
}

ext {
    lwjglVersion = "3.3.4"
    jomlVersion = "1.10.8"
    imguiVersion = "1.87.0"

    // OS detection
    osName = System.getProperty("os.name").toLowerCase();
    osArch = System.getProperty("os.arch").toLowerCase();

    if (osName.contains("windows")) {
        lwjglNatives = "natives-windows"
    } else if (osName.contains("mac") || osName.contains("darwin")) {
        if (osArch.contains("aarch64") || osArch.contains("arm64")) {
            lwjglNatives = "natives-macos-arm64"
        } else {
            lwjglNatives = "natives-macos"
        }
    } else {
        throw new GradleException("Unknown operating system")
    }

    // For imgui, it is only natives-macos not natives-macos-arm64
    _lwjglNatives = lwjglNatives
    if (_lwjglNatives.contains("arm64")) {
        _lwjglNatives = "natives-macos"
    }
}

group = 'MyCraft'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {

    // LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
        implementation "org.lwjgl:lwjgl"
        implementation "org.lwjgl:lwjgl-assimp"
        implementation "org.lwjgl:lwjgl-glfw"
        implementation "org.lwjgl:lwjgl-openal"
        implementation "org.lwjgl:lwjgl-opengl"
        implementation "org.lwjgl:lwjgl-stb"
        ['', '-assimp', '-glfw', '-openal', '-opengl', '-stb'].each {
            implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
                runtimeOnly "org.lwjgl:lwjgl$it::$lwjglNatives"
        }

    // JOML
    implementation "org.joml:joml:${jomlVersion}"

    // imgui-java
    implementation "io.github.spair:imgui-java-binding:$imguiVersion"
    implementation "io.github.spair:imgui-java-lwjgl3:$imguiVersion"
    implementation "io.github.spair:imgui-java-$_lwjglNatives:$imguiVersion"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'MyCraft.MyCraft'
}

tasks.withType(JavaExec) {
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs += ['-XstartOnFirstThread', '-Djava.awt.headless=true']
    }
}
